exporters:
  googlecloud/otel:
    log:
      default_log_name: my-log-name
      endpoint: 127.0.0.1:46589
      use_insecure: true
    project: my-project
    sending_queue:
      enabled: false
processors:
  resource/_global_0:
    attributes:
    - action: upsert
      key: cloud.availability_zone
      value: test-zone
    - action: upsert
      key: cloud.platform
      value: gcp_compute_engine
    - action: upsert
      key: cloud.project
      value: my-project
    - action: upsert
      key: cloud.region
      value: test-zone
    - action: upsert
      key: host.id
      value: test-instance-id
  transform/input_0:
    error_mode: ignore
    log_statements:
    - context: log
      statements:
      - "set(cache[\"__parsed_regex\"], ExtractPatternsRubyRegex(body[\"message\"], \"^(?<time>[^ ]*) (?<severity>[^ ]*) (?<msg>[^ ]*) (?<msg1>\\\\k<msg>)$\")) where (body != nil and body[\"message\"] != nil)"
      - delete_key(body, "message") where ((body != nil and body["message"] != nil) and (cache != nil and cache["__parsed_regex"] != nil))
      - merge_maps(body, cache["__parsed_regex"], "upsert") where (cache != nil and cache["__parsed_regex"] != nil)
      - delete_key(cache, "__parsed_regex") where (cache != nil and cache["__parsed_regex"] != nil)
      - set(cache["__time_valid"], false)
      - set(cache["__time_valid"], true) where ((body != nil and body["time"] != nil) and Time(body["time"], "%Y-%m-%dT%H:%M:%S.%L%z") != nil)
      - set(time, Time(body["time"], "%Y-%m-%dT%H:%M:%S.%L%z")) where cache["__time_valid"] == true
      - delete_key(body, "time") where ((body != nil and body["time"] != nil) and cache["__time_valid"] == true)
      - merge_maps(attributes, body["logging.googleapis.com/labels"], "upsert") where body["logging.googleapis.com/labels"] != nil
      - delete_key(body, "logging.googleapis.com/labels") where (body != nil and body["logging.googleapis.com/labels"] != nil)
      - delete_key(cache, "__field_0") where (cache != nil and cache["__field_0"] != nil)
      - set(cache["__field_0"], body["logging.googleapis.com/httpRequest"]) where (body != nil and body["logging.googleapis.com/httpRequest"] != nil)
      - delete_key(body, "logging.googleapis.com/httpRequest") where (body != nil and body["logging.googleapis.com/httpRequest"] != nil)
      - delete_key(cache, "value") where (cache != nil and cache["value"] != nil)
      - set(cache["value"], cache["__field_0"])
      - set(attributes["gcp.http_request"], cache["value"]) where (cache != nil and cache["value"] != nil)
      - delete_key(cache, "__field_0") where (cache != nil and cache["__field_0"] != nil)
      - set(cache["__field_0"], body["logging.googleapis.com/logName"]) where (body != nil and body["logging.googleapis.com/logName"] != nil)
      - delete_key(body, "logging.googleapis.com/logName") where (body != nil and body["logging.googleapis.com/logName"] != nil)
      - delete_key(cache, "value") where (cache != nil and cache["value"] != nil)
      - set(cache["value"], cache["__field_0"])
      - set(attributes["gcp.log_name"], cache["value"]) where (cache != nil and cache["value"] != nil)
      - delete_key(cache, "__field_0") where (cache != nil and cache["__field_0"] != nil)
      - set(cache["__field_0"], body["logging.googleapis.com/severity"]) where (body != nil and body["logging.googleapis.com/severity"] != nil)
      - delete_key(body, "logging.googleapis.com/severity") where (body != nil and body["logging.googleapis.com/severity"] != nil)
      - delete_key(cache, "value") where (cache != nil and cache["value"] != nil)
      - set(cache["value"], cache["__field_0"])
      - set(severity_text, cache["value"]) where (cache != nil and cache["value"] != nil)
      - set(severity_number, 0) where (cache != nil and cache["value"] != nil)
      - delete_key(cache, "__field_0") where (cache != nil and cache["__field_0"] != nil)
      - set(cache["__field_0"], body["logging.googleapis.com/sourceLocation"]) where (body != nil and body["logging.googleapis.com/sourceLocation"] != nil)
      - delete_key(body, "logging.googleapis.com/sourceLocation") where (body != nil and body["logging.googleapis.com/sourceLocation"] != nil)
      - delete_key(cache, "value") where (cache != nil and cache["value"] != nil)
      - set(cache["value"], cache["__field_0"])
      - set(attributes["gcp.source_location"], cache["value"]) where (cache != nil and cache["value"] != nil)
      - delete_key(cache, "__field_0") where (cache != nil and cache["__field_0"] != nil)
      - set(cache["__field_0"], body["logging.googleapis.com/spanId"]) where (body != nil and body["logging.googleapis.com/spanId"] != nil)
      - delete_key(body, "logging.googleapis.com/spanId") where (body != nil and body["logging.googleapis.com/spanId"] != nil)
      - delete_key(cache, "value") where (cache != nil and cache["value"] != nil)
      - set(cache["value"], cache["__field_0"])
      - set(span_id.string, cache["value"]) where (cache != nil and cache["value"] != nil)
      - delete_key(cache, "__field_0") where (cache != nil and cache["__field_0"] != nil)
      - set(cache["__field_0"], body["logging.googleapis.com/trace"]) where (body != nil and body["logging.googleapis.com/trace"] != nil)
      - delete_key(body, "logging.googleapis.com/trace") where (body != nil and body["logging.googleapis.com/trace"] != nil)
      - delete_key(cache, "value") where (cache != nil and cache["value"] != nil)
      - set(cache["value"], cache["__field_0"])
      - delete_key(cache, "__setif_value") where (cache != nil and cache["__setif_value"] != nil)
      - set(cache["__setif_value"], cache["value"])
      - replace_pattern(cache["__setif_value"], "^projects/([^/]*)/traces/", "")
      - set(trace_id.string, cache["__setif_value"]) where (cache != nil and cache["value"] != nil)
receivers:
  filelog/input:
    exclude: []
    include:
    - /usr/local/google/home/fcovalente/Github/ops-agent-prime/transformation_test/testdata/parse_regex/input.log
    include_file_name: false
    operators:
    - from: body
      id: body
      to: body.message
      type: move
    start_at: beginning
service:
  pipelines:
    logs/input:
      exporters:
      - googlecloud/otel
      processors:
      - transform/input_0
      - resource/_global_0
      receivers:
      - filelog/input
  telemetry:
    logs:
      encoding: json
      level: debug
    metrics:
      level: none