// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"go.opentelemetry.io/collector/confmap"
)

// MetricConfig provides common config for a particular metric.
type MetricConfig struct {
	Enabled bool `mapstructure:"enabled"`

	enabledSetByUser bool
}

func (ms *MetricConfig) Unmarshal(parser *confmap.Conf) error {
	if parser == nil {
		return nil
	}
	err := parser.Unmarshal(ms)
	if err != nil {
		return err
	}
	ms.enabledSetByUser = parser.IsSet("enabled")
	return nil
}

// MetricsConfig provides config for dcgm metrics.
type MetricsConfig struct {
	DcgmGpuMemoryBytesUsed            MetricConfig `mapstructure:"dcgm.gpu.memory.bytes_used"`
	DcgmGpuProfilingDramUtilization   MetricConfig `mapstructure:"dcgm.gpu.profiling.dram_utilization"`
	DcgmGpuProfilingNvlinkTrafficRate MetricConfig `mapstructure:"dcgm.gpu.profiling.nvlink_traffic_rate"`
	DcgmGpuProfilingPcieTrafficRate   MetricConfig `mapstructure:"dcgm.gpu.profiling.pcie_traffic_rate"`
	DcgmGpuProfilingPipeUtilization   MetricConfig `mapstructure:"dcgm.gpu.profiling.pipe_utilization"`
	DcgmGpuProfilingSmOccupancy       MetricConfig `mapstructure:"dcgm.gpu.profiling.sm_occupancy"`
	DcgmGpuProfilingSmUtilization     MetricConfig `mapstructure:"dcgm.gpu.profiling.sm_utilization"`
	DcgmGpuUtilization                MetricConfig `mapstructure:"dcgm.gpu.utilization"`
}

func DefaultMetricsConfig() MetricsConfig {
	return MetricsConfig{
		DcgmGpuMemoryBytesUsed: MetricConfig{
			Enabled: true,
		},
		DcgmGpuProfilingDramUtilization: MetricConfig{
			Enabled: true,
		},
		DcgmGpuProfilingNvlinkTrafficRate: MetricConfig{
			Enabled: true,
		},
		DcgmGpuProfilingPcieTrafficRate: MetricConfig{
			Enabled: true,
		},
		DcgmGpuProfilingPipeUtilization: MetricConfig{
			Enabled: true,
		},
		DcgmGpuProfilingSmOccupancy: MetricConfig{
			Enabled: true,
		},
		DcgmGpuProfilingSmUtilization: MetricConfig{
			Enabled: true,
		},
		DcgmGpuUtilization: MetricConfig{
			Enabled: true,
		},
	}
}

// MetricsBuilderConfig is a configuration for dcgm metrics builder.
type MetricsBuilderConfig struct {
	Metrics MetricsConfig `mapstructure:"metrics"`
}

func DefaultMetricsBuilderConfig() MetricsBuilderConfig {
	return MetricsBuilderConfig{
		Metrics: DefaultMetricsConfig(),
	}
}
