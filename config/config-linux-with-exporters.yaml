# This config mimicks the Cloud Monitoring Agent by collecting metrics from popular third-party services 
# the Agent already supports and formatting the metrics in the same way, so they appear similarly
# in Cloud Monitoring. The services targeted here are MySQL, Apache and JVM.
# There is also support for DogStatsD metrics, with no transformations
# Please configure your environment-specific details in the receivers part, especially for MySQL and JVM
# Please remove/comment-out the pipelines you don't need/want in the last section.
# Documentation specific to each exporter is found in the comment directly above its configuration

receivers:

  # commented out disk and process scrapers because they don't work as of now
  hostmetrics:
    collection_interval: 60s
    scrapers:
      cpu:
      filesystem:
      load:
      memory:
      network:
      paging:
      # disk:
      # process:     

  # https://github.com/prometheus/mysqld_exporter
  prometheus_exec/mysql:
    # --no-collect.global_variables reduces the amount of generated metrics, can be removed to enable all (600+) MySQL metrics
    exec: ./prometheus_exporter/mysqld_exporter --web.listen-address=":{{port}}" --no-collect.global_variables
    port: 9104
    env:
      # DATA_SOURCE_NAME and its value are needed to connect to the MySQL server, alternatively you could use a .my.cnf configuration file
    # - name: DATA_SOURCE_NAME  
    #   value: username:password@(host:port)/db_name  # replace all values here with your MySQL server credentials

  # https://github.com/Lusitaniae/apache_exporter
  prometheus_exec/apache:
    exec: ./prometheus_exporter/apache_exporter --telemetry.address=":{{port}}"
    port: 9117

  # https://github.com/prometheus/jmx_exporter
  prometheus_exec/jvm:
    # see prometheus_exporter_config/jvm_config.yaml for JMX configuration, notably the `jmxUrl` key
    exec: java -jar ./prometheus_exporter/jmx_exporter.jar {{port}} prometheus_exporter_config/jvm_config.yaml
    port: 9404

  # https://github.com/prometheus/statsd_exporter
  prometheus_exec/statsd:
    exec: ./prometheus_exporter/statsd_exporter
    port: 9102

processors:
  # Detect GCE info
  resourcedetection:
    detectors: [gce]

  # perform custom transformations that aren't supported by the metricstransform processor
  agentmetrics/host:
    # 1. combines resource process metrics into metrics with processes as labels
    # 2. splits "disk.io" metrics into read & write metrics
    # 3. creates utilization metrics from usage metrics

  filter/host:
    metrics:
      exclude:
        match_type: strict
        metric_names:
          - system.network.dropped
          - system.paging.usage
          - system.filesystem.inodes.usage
          - system.paging.faults

  metricstransform/host:
    transforms:
      # system.cpu.time -> cpu/usage_time
      - metric_name: system.cpu.time
        action: update
        new_name: agent.googleapis.com/cpu/usage_time
        operations:
          # change data type from double -> int64
          - action: toggle_scalar_data_type
          # change label cpu -> cpu_number
          - action: update_label
            label: cpu
            new_label: cpu_number
          # change label state -> cpu_state
          - action: update_label
            label: state
            new_label: cpu_state
          # take mean over cpu_number dimension, retaining only cpu_state
          - action: aggregate_labels
            label_set: [ cpu_state ]
            aggregation_type: mean
      # system.cpu.utilization -> cpu/utilization
      - metric_name: system.cpu.utilization
        action: update
        new_name: agent.googleapis.com/cpu/utilization
        operations:
          # change label cpu -> cpu_number
          - action: update_label
            label: cpu
            new_label: cpu_number
          # change label state -> cpu_state
          - action: update_label
            label: state
            new_label: cpu_state
          # take mean over cpu_number dimension, retaining only cpu_state
          - action: aggregate_labels
            label_set: [ cpu_state ]
            aggregation_type: mean
      # system.cpu.load_average.1m -> cpu/load_1m
      - metric_name: system.cpu.load_average.1m
        action: update
        new_name: agent.googleapis.com/cpu/load_1m
      # system.cpu.load_average.5m -> cpu/load_5m
      - metric_name: system.cpu.load_average.5m
        action: update
        new_name: agent.googleapis.com/cpu/load_5m
      # system.cpu.load_average.15m -> cpu/load_15m
      - metric_name: system.cpu.load_average.15m
        action: update
        new_name: agent.googleapis.com/cpu/load_15m
      # system.disk.read_io (as named after custom split logic) -> disk/read_bytes_count
      - metric_name: system.disk.read_io
        action: update
        new_name: agent.googleapis.com/disk/read_bytes_count
      # system.disk.write_io (as named after custom split logic) -> processes/write_bytes_count
      - metric_name: system.disk.write_io
        action: update
        new_name: agent.googleapis.com/disk/write_bytes_count
      # system.disk.operations -> disk/operation_count
      - metric_name: system.disk.operations
        action: update
        new_name: agent.googleapis.com/disk/operation_count
      # system.disk.operation_time -> disk/operation_time
      - metric_name: system.disk.operation_time
        action: update
        new_name: agent.googleapis.com/disk/operation_time
        operations:
          # change data type from double -> int64
          - action: toggle_scalar_data_type
      # system.disk.pending_operations -> disk/pending_operations
      - metric_name: system.disk.pending_operations
        action: update
        new_name: agent.googleapis.com/disk/pending_operations
        operations:
          # change data type from int64 -> double
          - action: toggle_scalar_data_type
      # system.disk.merged -> disk/merged_operations
      - metric_name: system.disk.merged
        action: update
        new_name: agent.googleapis.com/disk/merged_operations
      # system.filesystem.usage -> disk/bytes_used
      - metric_name: system.filesystem.usage
        action: update
        new_name: agent.googleapis.com/disk/bytes_used
        operations:
          # change data type from int64 -> double
          - action: toggle_scalar_data_type
          # take sum over mode, mountpoint & type dimensions, retaining only device & state
          - action: aggregate_labels
            label_set: [ device, state ]
            aggregation_type: sum
      # system.filesystem.utilization -> disk/percent_used
      - metric_name: system.filesystem.utilization
        action: update
        new_name: agent.googleapis.com/disk/percent_used
        operations:
          # take sum over mode, mountpoint & type dimensions, retaining only device & state
          - action: aggregate_labels
            label_set: [ device, state ]
            aggregation_type: sum
      # system.memory.usage -> memory/bytes_used
      - metric_name: system.memory.usage
        action: update
        new_name: agent.googleapis.com/memory/bytes_used
        operations:
          # change data type from int64 -> double
          - action: toggle_scalar_data_type
          # aggregate state label values: slab_reclaimable & slab_unreclaimable -> slab (note this is not currently supported)
          - action: aggregate_label_values
            label: state
            aggregated_values: [slab_reclaimable, slab_unreclaimable]
            new_value: slab
            aggregation_type: sum
      # system.memory.utilization -> memory/percent_used
      - metric_name: system.memory.utilization
        action: update
        new_name: agent.googleapis.com/memory/percent_used
        operations:
          # sum state label values: slab = slab_reclaimable + slab_unreclaimable
          - action: aggregate_label_values
            label: state
            aggregated_values: [slab_reclaimable, slab_unreclaimable]
            new_value: slab
            aggregation_type: sum
      # system.network.io -> interface/traffic
      - metric_name: system.network.io
        action: update
        new_name: agent.googleapis.com/interface/traffic
        operations:
          # change direction label values receive -> rx
          - action: update_label
            label: direction
            value_actions:
              # receive -> rx
              - value: receive
                new_value: rx
              # transmit -> tx
              - value: transmit
                new_value: tx
      # system.network.errors -> interface/errors
      - metric_name: system.network.errors
        action: update
        new_name: agent.googleapis.com/interface/errors
        operations:
          # change direction label values receive -> rx
          - action: update_label
            label: direction
            value_actions:
              # receive -> rx
              - value: receive
                new_value: rx
              # transmit -> tx
              - value: transmit
                new_value: tx
      # system.network.packets -> interface/packets
      - metric_name: system.network.packets
        action: update
        new_name: agent.googleapis.com/interface/packets
        operations:
          # change direction label values receive -> rx
          - action: update_label
            label: direction
            value_actions:
              # receive -> rx
              - value: receive
                new_value: rx
              # transmit -> tx
              - value: transmit
                new_value: tx
      # system.network.connections -> network/tcp_connections
      - metric_name: system.network.connections
        action: update
        new_name: agent.googleapis.com/network/tcp_connections
        operations:
          # change data type from int64 -> double
          - action: toggle_scalar_data_type
          # remove udp data
          - action: delete_label_value
            label: protocol
            label_value: udp
          # change label state -> tcp_state
          - action: update_label
            label: state
            new_label: tcp_state
          # remove protocol label
          - action: aggregate_labels
            label_set: [ state ]
            aggregation_type: sum
      # system.paging.operations -> swap/io
      - metric_name: system.paging.operations
        action: update
        new_name: agent.googleapis.com/swap/io
        operations:
          # delete singular type dimension, retaining only direction
          - action: aggregate_labels
            label_set: [ direction ]
            aggregation_type: sum
      # system.paging.utilization -> swap/percent_used
      - metric_name: system.paging.utilization
        action: update
        new_name: agent.googleapis.com/swap/percent_used
        operations:
          # take sum over direction dimension, retaining only state
          - action: aggregate_labels
            label_set: [ state ]
            aggregation_type: sum
      # process.cpu.time -> processes/cpu_time
      - metric_name: process.cpu.time
        action: update
        new_name: agent.googleapis.com/processes/cpu_time
        operations:
          # change data type from double -> int64
          - action: toggle_scalar_data_type
          # change label state -> user_or_syst
          - action: update_label
            label: state
            new_label: user_or_syst
      # process.disk.read_io (as named after custom split logic) -> processes/disk/read_bytes_count
      - metric_name: process.disk.read_io
        action: update
        new_name: agent.googleapis.com/processes/disk/read_bytes_count
      # process.disk.write_io (as named after custom split logic) -> processes/disk/write_bytes_count
      - metric_name: process.disk.write_io
        action: update
        new_name: agent.googleapis.com/processes/disk/write_bytes_count
      # process.memory.physical_usage -> processes/rss_usage
      - metric_name: process.memory.physical_usage
        action: update
        new_name: agent.googleapis.com/processes/rss_usage
        operations:
          # change data type from int64 -> double
          - action: toggle_scalar_data_type
      # process.memory.virtual_usage -> processes/vm_usage
      - metric_name: process.memory.virtual_usage
        action: update
        new_name: agent.googleapis.com/processes/vm_usage
        operations:
          # change data type from int64 -> double
          - action: toggle_scalar_data_type

  filter/mysql:
    metrics:
      include:
        match_type: strict
        metric_names: 
          - mysql_global_status_commands_total
          - mysql_global_status_threads_connected
          - mysql_global_status_handlers_total

  metricstransform/mysql:
    transforms:
      - metric_name: mysql_global_status_commands_total
        action: update
        new_name: agent.googleapis.com/mysql/command_count
        operations:
          - action: toggle_scalar_data_type

      - metric_name: mysql_global_status_threads_connected
        action: update
        new_name: agent.googleapis.com/mysql/thread_count
        operations:
          - action: add_label
            new_label: kind
            new_value: connected

      - metric_name: mysql_global_status_handlers_total
        action: update
        new_name: agent.googleapis.com/mysql/handler_count
        operations:
          - action: toggle_scalar_data_type
          - action: update_label
            label: handler
            new_label: kind

  filter/jvm:
    metrics:
      include:
        match_type: strict
        metric_names: 
          - java_lang_Memory_HeapMemoryUsage_committed
          - java_lang_Memory_HeapMemoryUsage_max
          - java_lang_Memory_HeapMemoryUsage_used
          - java_lang_Memory_NonHeapMemoryUsage_committed
          - java_lang_Memory_NonHeapMemoryUsage_max
          - java_lang_Memory_NonHeapMemoryUsage_used
          - java_lang_Threading_DaemonThreadCount
          - java_lang_Threading_ThreadCount
          - java_lang_OperatingSystem_OpenFileDescriptorCount

  metricstransform/jvm:
    transforms: 
      - metric_name: java_lang_Memory_HeapMemoryUsage_committed
        action: update
        new_name: agent.googleapis.com/jvm/memory/usage
        operations: 
          - action: add_label
            new_label: memory_type
            new_value: heap
          - action: add_label
            new_label: usage_kind
            new_value: committed

      - metric_name: java_lang_Memory_HeapMemoryUsage_max
        action: update
        new_name: agent.googleapis.com/jvm/memory/usage
        operations: 
          - action: add_label
            new_label: memory_type
            new_value: heap
          - action: add_label
            new_label: usage_kind
            new_value: max

      - metric_name: java_lang_Memory_NonHeapMemoryUsage_used
        action: update
        new_name: agent.googleapis.com/jvm/memory/usage
        operations: 
          - action: add_label
            new_label: memory_type
            new_value: non_heap
          - action: add_label
            new_label: usage_kind
            new_value: used

      - metric_name: java_lang_Memory_NonHeapMemoryUsage_committed
        action: update
        new_name: agent.googleapis.com/jvm/memory/usage
        operations: 
          - action: add_label
            new_label: memory_type
            new_value: non_heap
          - action: add_label
            new_label: usage_kind
            new_value: committed

      - metric_name: java_lang_Memory_NonHeapMemoryUsage_max
        action: update
        new_name: agent.googleapis.com/jvm/memory/usage
        operations: 
          - action: add_label
            new_label: memory_type
            new_value: non_heap
          - action: add_label
            new_label: usage_kind
            new_value: max

      - metric_name: java_lang_Memory_HeapMemoryUsage_used
        action: update
        new_name: agent.googleapis.com/jvm/memory/usage
        operations: 
          - action: add_label
            new_label: memory_type
            new_value: heap
          - action: add_label
            new_label: usage_kind
            new_value: used

      - metric_name: java_lang_Threading_DaemonThreadCount
        action: update
        new_name: agent.googleapis.com/jvm/thread/num_daemon
      
      - metric_name: java_lang_Threading_ThreadCount
        action: update
        new_name: agent.googleapis.com/jvm/thread/num_live
      
      - metric_name: java_lang_OperatingSystem_OpenFileDescriptorCount
        action: update
        new_name: agent.googleapis.com/jvm/os/open_files

  filter/apache:
    metrics:
      include:
        match_type: strict
        metric_names: 
          - promhttp_metric_handler_requests_total
          - apache_connections
          - apache_scoreboard
          - apache_workers
          - apache_sent_kilobytes_total

  metricstransform/apache:
    transforms:
      - metric_name: promhttp_metric_handler_requests_total
        action: update
        new_name: agent.googleapis.com/apache/request_count
        operations:
         - action: aggregate_labels
           label_set: []
           aggregation_type: sum
         - action: toggle_scalar_data_type 

      - metric_name: apache_connections
        action: update
        new_name: agent.googleapis.com/apache/connections
        operations:
          - action: aggregate_labels
            label_set: []
            aggregation_type: max

      - metric_name: apache_scoreboard
        action: update
        new_name: agent.googleapis.com/apache/scoreboard
        operations:
          - action: update_label
            label: state
            value_actions:
              - value: dns
                new_value: dnslookup
              - value: idle
                new_value: waiting
              - value: open_slot
                new_value: open
              - value: read
                new_value: reading
              - value: reply
                new_value: sending
              - value: startup
                new_value: starting
              - value: graceful_stop
                new_value: finishing

      - metric_name: apache_workers
        action: update
        new_name: agent.googleapis.com/apache/idle_workers
        operations:
          - action: aggregate_labels
            label_set: []
            aggregation_type: max
            #this is a hack since the correct value is not necessarily max
      
      - metric_name: apache_sent_kilobytes_total
        action: update
        new_name: agent.googleapis.com/apache/traffic
        operations:
          - action: toggle_scalar_data_type

exporters:

  # this exporter will prefix all metrics without a domain (eg. agent.googleapis.com/) with custom.googleapis.com/
  # also, it will use the default GCE instance credentials this Collector will run on
  googlecloud:
    metric:
      prefix: custom.googleapis.com/

service:
  pipelines:
    # Remove any unwanted pipelines from this list if desired
    metrics/host:
      receivers: [hostmetrics]
      processors: [agentmetrics/host, metricstransform/host, filter/host, resourcedetection]
      exporters: [googlecloud]

    metrics/mysql:
      receivers: [prometheus_exec/mysql]
      processors: [filter/mysql, metricstransform/mysql, resourcedetection]
      exporters: [googlecloud]

    metrics/jvm:
      receivers: [prometheus_exec/jvm]
      processors: [filter/jvm, metricstransform/jvm, resourcedetection]
      exporters: [googlecloud]

    metrics/apache:
      receivers: [prometheus_exec/apache]
      processors: [filter/apache, metricstransform/apache, resourcedetection]
      exporters: [googlecloud]

    metrics/statsd:
      receivers: [prometheus_exec/statsd]
      processors: [resourcedetection]
      exporters: [googlecloud]
