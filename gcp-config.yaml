receivers:
  # scrape all metrics at 1m interval
  hostmetrics:
    collection_interval: 11s # for testing
    scrapers:
      cpu:
        report_per_cpu: true
      load:
      memory:
      disk:
      filesystem:
      network:
      process:
  # add receivers from Nic to extend the ability for MySQL, JVM and Apache

processors:
  # filter out metrics not currently supported by Cloud Monitoring
  filter:
    metrics:
      exclude:
        match_type: strict
        metric_names:
          - host/disk/time # TODO: Fix is in Core - should be counter, is currently Gauge
          - host/network/dropped_packets

  # append resource information from GCE metadata
  resourcedetection:
    detectors: [gce]

  # convert from OpenTelemetry metric formats to Cloud Monitoring formats
  metricstransform:
    transforms:
      # host/cpu/usage -> cpu/usage_time
      - metric_name: host/cpu/usage
        action: update
        new_name: cpu/usage_time
        operations:
          # change data type from double -> int64
          - action: change_data_type
          # change label cpu -> cpu_number
          - action: update_label
            label: cpu
            new_label: cpu_number
          # change label state -> cpu_state
          - action: update_label
            label: state
            new_label: cpu_state
      # host/disk/read_bytes (as named after custom split logic) -> disk/read_bytes_count
      - metric_name: host/disk/read_bytes
        action: update
        new_name: disk/read_bytes_count
      # host/disk/write_bytes (as named after custom split logic) -> processes/write_bytes_count
      - metric_name: host/disk/write_bytes
        action: update
        new_name: disk/write_bytes_count
      # host/disk/ops -> disk/operation_count
      - metric_name: host/disk/ops
        action: update
        new_name: disk/operation_count
      # host/disk/time -> disk/operation_time
      - metric_name: host/disk/time
        action: update
        new_name: disk/operation_time
      # host/filesystem/used -> disk/bytes_used
      - metric_name: host/filesystem/used
        action: update
        new_name: disk/bytes_used
        operations:
          # change data type from int64 -> double
          - action: change_data_type
      # host/load/1m -> cpu/load_1m
      - metric_name: host/load/1m
        action: update
        new_name: cpu/load_1m
      # host/load/5m -> cpu/load_5m
      - metric_name: host/load/5m
        action: update
        new_name: cpu/load_5m
      # host/load/15m -> cpu/load_15m
      - metric_name: host/load/15m
        action: update
        new_name: cpu/load_15m
      # host/memory/used -> host/bytes_used
      - metric_name: host/memory/used
        action: update
        new_name: memory/bytes_used
        operations:
          # change data type from int64 -> double
          - action: change_data_type
          # aggregate state label values: slab_reclaimable & slab_unreclaimable -> slab (note this is not currently supported)
          - action: aggregate_label_values
            label: state
            aggregated_values: [slab_reclaimable, slab_unreclaimable]
            new_value: slab
            aggregation_type: sum
      # host/network/bytes -> interface/traffic
      - metric_name: host/network/bytes
        action: update
        new_name: interface/traffic
      # host/network/errors -> interface/errors
      - metric_name: host/network/errors
        action: update
        new_name: interface/errors
      # host/network/packets -> interface/packets
      - metric_name: host/network/packets
        action: update
        new_name: interface/packets
      # host/network/tcp_connections -> network/tcp_connections
      - metric_name: host/network/tcp_connections 
        action: update
        new_name: network/tcp_connections
        operations:
          # change data type from int64 -> double
          - action: change_data_type
          # change label state -> tcp_state
          - action: update_label
            label: state
            new_label: tcp_state
      # process/cpu/usage -> processes/cpu_time
      - metric_name: process/cpu/usage
        action: update
        new_name: processes/cpu_time
        operations:
          # change data type from double -> int64
          - action: change_data_type
          # aggregate away the state label (note this is not currently supported)
          - action: aggregate_labels
            label_set: [pid, process, command, command_line, owner] # currently ignores "user_or_syst"
            aggregation_type: sum
      # process/disk/read_bytes (as named after custom split logic) -> processes/read_bytes_count
      - metric_name: process/disk/read_bytes
        action: update
        new_name: processes/read_bytes_count
      # process/disk/write_bytes (as named after custom split logic) -> processes/write_bytes_count
      - metric_name: process/disk/write_bytes
        action: update
        new_name: processes/write_bytes_count
      # process/memory/usage -> processes/vm_usage
      - metric_name: process/memory/usage
        action: update
        new_name: processes/vm_usage
        operations:
          # change data type from int64 -> double
          - action: change_data_type

exporters:
  # export to Cloud Monitoring using the agent prefix
  stackdriver:
    metric_prefix: agent.googleapis.com/

  # for debugging
  logging:
  file:
    path: ./metrics.json

service:
  pipelines:
    metrics:
      receivers: [hostmetrics]
      processors: [filter, metricstransform, resourcedetection]
      exporters: [stackdriver, logging]