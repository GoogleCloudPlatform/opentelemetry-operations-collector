# This Dockerfile provides the same resulting container as
# the main Dockerfile, but it also performs the build within
# an earlier layer. The resulting container will be scratch and
# should be functionally identical.

# By default, this container should have the root of your project
# where all distributions are container. The generated version will
# use the respective distribution as the working directory for builds.
# The whole project is copied to the container in case you provide
# any custom components contained within your full project structure.
ARG PROJECT_ROOT="."
ARG CERT_CONTAINER="debian:bookworm"
ARG BUILD_CONTAINER="google/cloud-sdk@sha256:cad12907540b1a43c9279503796723817e62da1f8fd3b8723755effb9d55e1e1"
FROM --platform=${BUILDPLATFORM} ${BUILD_CONTAINER} AS build
RUN rm -f /etc/apt/sources.list.d/* /etc/apt/sources.list
RUN echo 'deb https://us-apt.pkg.dev/remote/artifact-foundry-prod/debian-3p-remote-bookworm bookworm main' | tee -a  /etc/apt/sources.list.d/artifact-registry.list
RUN apt-get update && apt-get install -y make curl build-essential

ARG PROJECT_ROOT
COPY ${PROJECT_ROOT} /

WORKDIR /{{ .Name }}

ARG BUILDARCH
ARG BUILDOS
ARG TARGETOS
ARG TARGETARCH
RUN if [ "${TARGETARCH}" = "arm64" ] && [ "${BUILDARCH}" != "arm64" ]; then \
        CC=aarch64-linux-gnu-gcc; \
    fi && \
    CC=${CC} GO_BIN_DIR=/usr/local/go/bin make -f pull_modules_from_ar_repos.mk aoss-build

FROM ${CERT_CONTAINER} AS certs
RUN rm -f /etc/apt/sources.list.d/* /etc/apt/sources.list
RUN echo 'deb https://us-apt.pkg.dev/remote/artifact-foundry-prod/debian-3p-remote-bookworm bookworm main' | tee -a  /etc/apt/sources.list.d/artifact-registry.list
RUN apt-get update && apt-get install -y ca-certificates

FROM gcr.io/distroless/static

ARG USER_UID=10001
USER ${USER_UID}

COPY --from=certs /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt
COPY --from=build --chmod=755 /{{ .Name }}/{{ .BinaryName }} /{{ .BinaryName }}
COPY --from=build --chmod=644 /{{ .Name }}/config.yaml /etc/{{ .BinaryName }}/config.yaml

ENTRYPOINT ["/{{ .BinaryName }}"{{ $length := len .FeatureGates }}{{ if gt $length 0 }}, "--feature-gates={{ .FeatureGates.Render }}"{{ end }}]
CMD ["--config=/etc/{{ .BinaryName }}/config.yaml"]
