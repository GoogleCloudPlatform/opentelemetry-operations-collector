// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/pmetric"
	"go.opentelemetry.io/collector/receiver/receivertest"
	"go.uber.org/zap"
	"go.uber.org/zap/zaptest/observer"
)

type testDataSet int

const (
	testDataSetDefault testDataSet = iota
	testDataSetAll
	testDataSetNone
)

func TestMetricsBuilder(t *testing.T) {
	tests := []struct {
		name        string
		metricsSet  testDataSet
		resAttrsSet testDataSet
		expectEmpty bool
	}{
		{
			name: "default",
		},
		{
			name:        "all_set",
			metricsSet:  testDataSetAll,
			resAttrsSet: testDataSetAll,
		},
		{
			name:        "none_set",
			metricsSet:  testDataSetNone,
			resAttrsSet: testDataSetNone,
			expectEmpty: true,
		},
	}
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			start := pcommon.Timestamp(1_000_000_000)
			ts := pcommon.Timestamp(1_000_001_000)
			observedZapCore, observedLogs := observer.New(zap.WarnLevel)
			settings := receivertest.NewNopSettings()
			settings.Logger = zap.New(observedZapCore)
			mb := NewMetricsBuilder(loadMetricsBuilderConfig(t, test.name), settings, WithStartTime(start))

			expectedWarnings := 0

			assert.Equal(t, expectedWarnings, observedLogs.Len())

			defaultMetricsCount := 0
			allMetricsCount := 0

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordDcgmGpuMemoryBytesUsedDataPoint(ts, 1, "model-val", "gpu_number-val", "uuid-val", AttributeMemoryStateUsed)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordDcgmGpuProfilingDramUtilizationDataPoint(ts, 1, "model-val", "gpu_number-val", "uuid-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordDcgmGpuProfilingNvlinkTrafficRateDataPoint(ts, 1, "model-val", "gpu_number-val", "uuid-val", AttributeDirectionTx)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordDcgmGpuProfilingPcieTrafficRateDataPoint(ts, 1, "model-val", "gpu_number-val", "uuid-val", AttributeDirectionTx)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordDcgmGpuProfilingPipeUtilizationDataPoint(ts, 1, "model-val", "gpu_number-val", "uuid-val", AttributePipeTensor)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordDcgmGpuProfilingSmOccupancyDataPoint(ts, 1, "model-val", "gpu_number-val", "uuid-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordDcgmGpuProfilingSmUtilizationDataPoint(ts, 1, "model-val", "gpu_number-val", "uuid-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordDcgmGpuUtilizationDataPoint(ts, 1, "model-val", "gpu_number-val", "uuid-val")

			res := pcommon.NewResource()
			metrics := mb.Emit(WithResource(res))

			if test.expectEmpty {
				assert.Equal(t, 0, metrics.ResourceMetrics().Len())
				return
			}

			assert.Equal(t, 1, metrics.ResourceMetrics().Len())
			rm := metrics.ResourceMetrics().At(0)
			assert.Equal(t, res, rm.Resource())
			assert.Equal(t, 1, rm.ScopeMetrics().Len())
			ms := rm.ScopeMetrics().At(0).Metrics()
			if test.metricsSet == testDataSetDefault {
				assert.Equal(t, defaultMetricsCount, ms.Len())
			}
			if test.metricsSet == testDataSetAll {
				assert.Equal(t, allMetricsCount, ms.Len())
			}
			validatedMetrics := make(map[string]bool)
			for i := 0; i < ms.Len(); i++ {
				switch ms.At(i).Name() {
				case "dcgm.gpu.memory.bytes_used":
					assert.False(t, validatedMetrics["dcgm.gpu.memory.bytes_used"], "Found a duplicate in the metrics slice: dcgm.gpu.memory.bytes_used")
					validatedMetrics["dcgm.gpu.memory.bytes_used"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Current number of GPU memory bytes used by state. Summing the values of all states yields the total GPU memory space.", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("model")
					assert.True(t, ok)
					assert.EqualValues(t, "model-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("gpu_number")
					assert.True(t, ok)
					assert.EqualValues(t, "gpu_number-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("uuid")
					assert.True(t, ok)
					assert.EqualValues(t, "uuid-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("memory_state")
					assert.True(t, ok)
					assert.EqualValues(t, "used", attrVal.Str())
				case "dcgm.gpu.profiling.dram_utilization":
					assert.False(t, validatedMetrics["dcgm.gpu.profiling.dram_utilization"], "Found a duplicate in the metrics slice: dcgm.gpu.profiling.dram_utilization")
					validatedMetrics["dcgm.gpu.profiling.dram_utilization"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Fraction of cycles data was being sent or received from GPU memory.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.Equal(t, float64(1), dp.DoubleValue())
					attrVal, ok := dp.Attributes().Get("model")
					assert.True(t, ok)
					assert.EqualValues(t, "model-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("gpu_number")
					assert.True(t, ok)
					assert.EqualValues(t, "gpu_number-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("uuid")
					assert.True(t, ok)
					assert.EqualValues(t, "uuid-val", attrVal.Str())
				case "dcgm.gpu.profiling.nvlink_traffic_rate":
					assert.False(t, validatedMetrics["dcgm.gpu.profiling.nvlink_traffic_rate"], "Found a duplicate in the metrics slice: dcgm.gpu.profiling.nvlink_traffic_rate")
					validatedMetrics["dcgm.gpu.profiling.nvlink_traffic_rate"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "The average rate of bytes received from the GPU over NVLink over the sample period, not including protocol headers.", ms.At(i).Description())
					assert.Equal(t, "By/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("model")
					assert.True(t, ok)
					assert.EqualValues(t, "model-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("gpu_number")
					assert.True(t, ok)
					assert.EqualValues(t, "gpu_number-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("uuid")
					assert.True(t, ok)
					assert.EqualValues(t, "uuid-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("direction")
					assert.True(t, ok)
					assert.EqualValues(t, "tx", attrVal.Str())
				case "dcgm.gpu.profiling.pcie_traffic_rate":
					assert.False(t, validatedMetrics["dcgm.gpu.profiling.pcie_traffic_rate"], "Found a duplicate in the metrics slice: dcgm.gpu.profiling.pcie_traffic_rate")
					validatedMetrics["dcgm.gpu.profiling.pcie_traffic_rate"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "The average rate of bytes sent from the GPU over the PCIe bus over the sample period, including both protocol headers and data payloads.", ms.At(i).Description())
					assert.Equal(t, "By/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("model")
					assert.True(t, ok)
					assert.EqualValues(t, "model-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("gpu_number")
					assert.True(t, ok)
					assert.EqualValues(t, "gpu_number-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("uuid")
					assert.True(t, ok)
					assert.EqualValues(t, "uuid-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("direction")
					assert.True(t, ok)
					assert.EqualValues(t, "tx", attrVal.Str())
				case "dcgm.gpu.profiling.pipe_utilization":
					assert.False(t, validatedMetrics["dcgm.gpu.profiling.pipe_utilization"], "Found a duplicate in the metrics slice: dcgm.gpu.profiling.pipe_utilization")
					validatedMetrics["dcgm.gpu.profiling.pipe_utilization"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Fraction of cycles the corresponding GPU pipe was active, averaged over time and all multiprocessors.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.Equal(t, float64(1), dp.DoubleValue())
					attrVal, ok := dp.Attributes().Get("model")
					assert.True(t, ok)
					assert.EqualValues(t, "model-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("gpu_number")
					assert.True(t, ok)
					assert.EqualValues(t, "gpu_number-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("uuid")
					assert.True(t, ok)
					assert.EqualValues(t, "uuid-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("pipe")
					assert.True(t, ok)
					assert.EqualValues(t, "tensor", attrVal.Str())
				case "dcgm.gpu.profiling.sm_occupancy":
					assert.False(t, validatedMetrics["dcgm.gpu.profiling.sm_occupancy"], "Found a duplicate in the metrics slice: dcgm.gpu.profiling.sm_occupancy")
					validatedMetrics["dcgm.gpu.profiling.sm_occupancy"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Fraction of resident warps on a multiprocessor relative to the maximum number supported, averaged over time and all multiprocessors.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.Equal(t, float64(1), dp.DoubleValue())
					attrVal, ok := dp.Attributes().Get("model")
					assert.True(t, ok)
					assert.EqualValues(t, "model-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("gpu_number")
					assert.True(t, ok)
					assert.EqualValues(t, "gpu_number-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("uuid")
					assert.True(t, ok)
					assert.EqualValues(t, "uuid-val", attrVal.Str())
				case "dcgm.gpu.profiling.sm_utilization":
					assert.False(t, validatedMetrics["dcgm.gpu.profiling.sm_utilization"], "Found a duplicate in the metrics slice: dcgm.gpu.profiling.sm_utilization")
					validatedMetrics["dcgm.gpu.profiling.sm_utilization"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Fraction of time at least one warp was active on a multiprocessor, averaged over all multiprocessors.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.Equal(t, float64(1), dp.DoubleValue())
					attrVal, ok := dp.Attributes().Get("model")
					assert.True(t, ok)
					assert.EqualValues(t, "model-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("gpu_number")
					assert.True(t, ok)
					assert.EqualValues(t, "gpu_number-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("uuid")
					assert.True(t, ok)
					assert.EqualValues(t, "uuid-val", attrVal.Str())
				case "dcgm.gpu.utilization":
					assert.False(t, validatedMetrics["dcgm.gpu.utilization"], "Found a duplicate in the metrics slice: dcgm.gpu.utilization")
					validatedMetrics["dcgm.gpu.utilization"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Fraction of time the GPU was not idle.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.Equal(t, float64(1), dp.DoubleValue())
					attrVal, ok := dp.Attributes().Get("model")
					assert.True(t, ok)
					assert.EqualValues(t, "model-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("gpu_number")
					assert.True(t, ok)
					assert.EqualValues(t, "gpu_number-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("uuid")
					assert.True(t, ok)
					assert.EqualValues(t, "uuid-val", attrVal.Str())
				}
			}
		})
	}
}
