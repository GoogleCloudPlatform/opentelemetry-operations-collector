# NOTE: File generated by distrogen. Do not manually edit.

# This Dockerfile provides the same resulting container as
# the main Dockerfile, but it also performs the build within
# an earlier layer. The resulting container will be scratch and
# should be functionally identical.

# By default, this container should have the root of your project
# where all distributions are container. The generated version will
# use the respective distribution as the working directory for builds.
# The whole project is copied to the container in case you provide
# any custom components contained within your full project structure.
ARG PROJECT_ROOT="."
ARG CERT_CONTAINER="alpine:3"
{{ if eq .BuildContainer "ubuntu" -}}
ARG BUILD_CONTAINER="ubuntu:24.04"
FROM --platform=${BUILDPLATFORM:-linux/amd64} ${BUILD_CONTAINER} AS build

RUN apt-get update && apt-get install -y make curl{{ if .CollectorCGO }} build-essential{{ end }}

{{ else -}}
ARG BUILD_CONTAINER="google/cloud-sdk:alpine"
FROM --platform=${BUILDPLATFORM:-linux/amd64} ${BUILD_CONTAINER} AS build

RUN apk --update add make curl{{ if .CollectorCGO }} alpine-sdk{{ end }}

{{ end -}}

ARG PROJECT_ROOT
COPY ${PROJECT_ROOT} /

WORKDIR /{{ .Name }}

ARG BUILDARCH
ARG BUILDOS
ARG TARGETOS
ARG TARGETARCH
RUN make -f Makefile.aoss build

FROM ${CERT_CONTAINER} AS certs
RUN apk --update add ca-certificates

FROM scratch

ARG USER_UID=10001
USER ${USER_UID}

COPY --from=certs /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt
COPY --from=build --chmod=755 /{{ .Name }}/{{ .BinaryName }} /{{ .BinaryName }}
COPY --from=build --chmod=644 /{{ .Name }}/config.yaml /etc/{{ .BinaryName }}/config.yaml

ENTRYPOINT ["/{{ .BinaryName }}"{{ $length := len .FeatureGates }}{{ if gt $length 0 }}, "--feature-gates={{ .FeatureGates.Render }}"{{ end }}]
CMD ["--config=/etc/{{ .BinaryName }}/config.yaml"]
