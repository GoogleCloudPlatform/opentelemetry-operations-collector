# This config mimicks the Cloud Monitoring Agent by collecting metrics from popular third-party services the Agent already supports
# and formatting the metrics in the same way, so they appear similarly in Cloud Monitoring. The services targeted here are MySQL, Apache and JVM.
# There is also support for DogStatsD metrics, with no transformations
# Please remove/comment-out the pipelines you don't need/want in the last section.
# Documentation specific to each exporter is found in the comment directly above its configuration

receivers:

  hostmetrics:
    collection_interval: 60s
    scrapers:
      cpu:
      filesystem:
      load:
      memory:
      network:
      swap:

  # https://github.com/prometheus/mysqld_exporter
  prometheus_exec/mysql:
  # --no-collect.global_variables reduces the amount of generated metrics, can be removed to enable all (600+) MySQL metrics
    exec: ./prometheus_exporters/mysqld_exporter --web.listen-address=":{{port}}" --no-collect.global_variables
    port: 9104
    env:
      # DATA_SOURCE_NAME and its value are needed to connect to the MySQL server, alternatively you could use a .my.cnf configuration file
    - name: DATA_SOURCE_NAME  
      value: username:password@(host:port)/db_name  # replace all values here with your MySQL server credentials

  # https://github.com/Lusitaniae/apache_exporter
  prometheus_exec/apache:
    exec: ./prometheus_exporters/apache_exporter --telemetry.address=":{{port}}"
    port: 9117

  # https://github.com/prometheus/jmx_exporter
  prometheus_exec/jvm:
    # see exporter_configs/jvm_config.yaml for JMX configuration, notably the `jmxUrl` key
    exec: java -jar ./prometheus_exporters/jmx_exporter.jar {{port}} exporter_configs/jvm_config.yaml
    port: 9404

  # https://github.com/prometheus/statsd_exporter
  prometheus_exec/statsd:
    exec: ./prometheus_exporters/statsd_exporter
    port: 9102

processors:
  # Detect GCE info
  resourcedetection:
    detectors: [gce]

  filter/mysql:
    metrics:
      include:
        match_type: strict
        # Filtering out unused MySQL metrics, there's too many generated
        metric_names: 
          - mysql_global_status_commands_total
          - mysql_global_status_threads_connected
          - mysql_global_status_handlers_total

  metricstransform/mysql:
    transforms:
      - metric_name: mysql_global_status_commands_total
        action: update
        new_name: agent.googleapis.com/mysql/command_count
        operations:
          - action: toggle_scalar_data_type

      - metric_name: mysql_global_status_threads_connected
        action: update
        new_name: agent.googleapis.com/mysql/thread_count
        operations:
          - action: add_label
            new_label: kind
            new_value: connected

      - metric_name: mysql_global_status_handlers_total
        action: update
        new_name: agent.googleapis.com/mysql/handler_count
        operations:
          - action: toggle_scalar_data_type
          - action: update_label
            label: handler
            new_label: kind

  metricstransform/jvm:
    transforms: 
      - metric_name: java_lang_Memory_HeapMemoryUsage_committed
        action: update
        new_name: agent.googleapis.com/jvm/memory/usage
        operations: 
          - action: add_label
            new_label: memory_type
            new_value: heap
          - action: add_label
            new_label: usage_kind
            new_value: committed

      - metric_name: java_lang_Memory_HeapMemoryUsage_max
        action: update
        new_name: agent.googleapis.com/jvm/memory/usage
        operations: 
          - action: add_label
            new_label: memory_type
            new_value: heap
          - action: add_label
            new_label: usage_kind
            new_value: max

      - metric_name: java_lang_Memory_NonHeapMemoryUsage_used
        action: update
        new_name: agent.googleapis.com/jvm/memory/usage
        operations: 
          - action: add_label
            new_label: memory_type
            new_value: non_heap
          - action: add_label
            new_label: usage_kind
            new_value: used

      - metric_name: java_lang_Memory_NonHeapMemoryUsage_committed
        action: update
        new_name: agent.googleapis.com/jvm/memory/usage
        operations: 
          - action: add_label
            new_label: memory_type
            new_value: non_heap
          - action: add_label
            new_label: usage_kind
            new_value: committed

      - metric_name: java_lang_Memory_HeapMemoryUsage_used
        action: update
        new_name: agent.googleapis.com/jvm/memory/usage
        operations: 
          - action: add_label
            new_label: memory_type
            new_value: heap
          - action: add_label
            new_label: usage_kind
            new_value: used

      - metric_name: java_lang_Memory_NonHeapMemoryUsage_max
        action: update
        new_name: agent.googleapis.com/jvm/memory/usage
        operations: 
          - action: add_label
            new_label: memory_type
            new_value: non_heap
          - action: add_label
            new_label: usage_kind
            new_value: max

      - metric_name: java_lang_Threading_DaemonThreadCount
        action: update
        new_name: agent.googleapis.com/jvm/thread/num_daemon
      
      - metric_name: java_lang_Threading_ThreadCount
        action: update
        new_name: agent.googleapis.com/jvm/thread/num_live
      
      - metric_name: java_lang_OperatingSystem_OpenFileDescriptorCount
        action: update
        new_name: agent.googleapis.com/jvm/os/open_files

  metricstransform/apache:
    transforms:
      - metric_name: promhttp_metric_handler_requests_total
        action: update
        new_name: agent.googleapis.com/apache/request_count
        operations:
         - action: aggregate_labels
           label_set: []
           aggregation_type: sum
         - action: toggle_scalar_data_type 

      - metric_name: apache_connections
        action: update
        new_name: agent.googleapis.com/apache/connections
        operations:
          - action: aggregate_labels
            label_set: []
            aggregation_type: max

      - metric_name: apache_scoreboard
        action: update
        new_name: agent.googleapis.com/apache/scoreboard
        operations:
          - action: update_label
            label: state
            value_actions:
              - value: dns
                new_value: dnslookup
              - value: idle
                new_value: waiting
              - value: open_slot
                new_value: open
              - value: read
                new_value: reading
              - value: reply
                new_value: sending
              - value: startup
                new_value: starting
              - value: graceful_stop
                new_value: finishing

      - metric_name: apache_workers
        action: update
        new_name: agent.googleapis.com/apache/idle_workers
        operations:
          - action: aggregate_labels
            label_set: []
            aggregation_type: max
            #this is a hack since the correct value is not necessarily max
      
      - metric_name: apache_sent_kilobytes_total
        action: update
        new_name: agent.googleapis.com/apache/traffic
        operations:
          - action: toggle_scalar_data_type

  metricstransform/host:
    transforms:
      # system.cpu.time -> cpu/usage_time
      - metric_name: system.cpu.time
        action: update
        new_name: agent.googleapis.com/cpu/usage_time
        operations:
          # change data type from double -> int64
          - action: toggle_scalar_data_type
          # change label cpu -> cpu_number
          - action: update_label
            label: cpu
            new_label: cpu_number
          # change label state -> cpu_state
          - action: update_label
            label: state
            new_label: cpu_state
          # take mean over cpu_number dimension, retaining only cpu_state
          - action: aggregate_labels
            label_set: [ cpu_state ]
            aggregation_type: mean
            
      - metric_name: system.memory.usage
        action: update
        new_name: agent.googleapis.com/memory/bytes_used
        operations:
          # change data type from int64 -> double
          - action: toggle_scalar_data_type
          # aggregate state label values: slab_reclaimable & slab_unreclaimable -> slab (note this is not currently supported)
          - action: aggregate_label_values
            label: state
            aggregated_values: [slab_reclaimable, slab_unreclaimable]
            new_value: slab
            aggregation_type: sum
            
      - metric_name: system.network.tcp_connections 
        action: update
        new_name: agent.googleapis.com/network/tcp_connections
        operations:
          # change data type from int64 -> double
          - action: toggle_scalar_data_type
          # change label state -> tcp_state
          - action: update_label
            label: state
            new_label: tcp_state
            
      - metric_name: system.swap.paging_ops
        action: update
        new_name: agent.googleapis.com/swap/io
        operations:
          # delete singular type dimension, retaining only direction
          - action: aggregate_labels
            label_set: [ direction ]
            aggregation_type: sum

exporters:
  stackdriver:  
    project:  # stackdriver will use the default GCE credentials
    metric_prefix: # empty to prevent the custom.googleapis.com/ prefix

service:
  pipelines:
    # Remember to remove unwanted pipelines from this list
    metrics/mysql:
      receivers: [prometheus_exec/mysql]
      processors: [filter/mysql, resourcedetection, metricstransform/mysql]
      exporters: [stackdriver]

    metrics/jvm:
      receivers: [prometheus_exec/jvm]
      processors: [resourcedetection, metricstransform/jvm]
      exporters: [stackdriver]

    metrics/apache:
      receivers: [prometheus_exec/apache]
      processors: [resourcedetection, metricstransform/apache]
      exporters: [stackdriver]

    metrics/host:
      receivers: [hostmetrics]
      processors: [resourcedetection, metricstransform/host]
      exporters: [stackdriver]

    metrics/statsd:
      receivers: [prometheus_exec/statsd]
      processors: [resourcedetection]
      exporters: [stackdriver]
